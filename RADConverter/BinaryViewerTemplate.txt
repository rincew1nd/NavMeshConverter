// ---------------------------------------------- //
//                                                //
//      This is a template for Binary Viewer      //
//    https://www.proxoft.com/BinaryViewer.aspx   //
//                                                //
// ---------------------------------------------- //

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;
using RADConverter;

namespace RADConverter { }

[Description("NavMesh")]
public class NavMesh
{
    [Description("NavMesh Header")]
    public NavMeshSetHeader NavMeshSetHeader;

    [Description("NavMesh Tiles")]
    public MeshTile[] MeshTile;

    public void Reserved_PopulateWithData(Func<long, long, byte[]> getData, long streamSize, long adress)
    {
        byte[] data = getData(0, 500);
        PopulateWithData(data, 0);
    }

    public void PopulateWithData(byte[] data, int StartAddress)
    {
        var offset = StartAddress;
        
        NavMeshSetHeader = new NavMeshSetHeader();
        NavMeshSetHeader.PopulateWithData(data, offset);
        offset += 40;

        MeshTile = new MeshTile[1];// NavMeshSetHeader.NumTiles];
        for (var i = 0; i < 1; i++)//NavMeshSetHeader.NumTiles; i++)
        {
            MeshTile[i] = new MeshTile();
            MeshTile[i].PopulateWithData(data, offset);
        }
    }
}

[Description("NavMeshSetHeader")]
public class NavMeshSetHeader
{
    [Description("Magic")]
    public int Magic;

    [Description("Version")]
    public int Version;

    [Description("Tiles count")]
    public int NumTiles;

    [Description("Parameters")]
    public NavMeshParams Params;

    public void Reserved_PopulateWithData(Func<long, long, byte[]> getData, long streamSize, long adress)
    {
        byte[] data = getData(0, 40);
        PopulateWithData(data, 0);
    }

    public void PopulateWithData(byte[] data, int StartAddress)
    {
        var offset = StartAddress;

        Magic = BitConverter.ToInt32(data, offset);
        offset += 4;
        Version = BitConverter.ToInt32(data, offset);
        offset += 4;
        NumTiles = BitConverter.ToInt32(data, offset);
        offset += 4;

        Params = new NavMeshParams();
        Params.PopulateWithData(data, offset);
    }
}

[Description("NavMesh Parameters")]
public class NavMeshParams
{
    [Description("The world space origin of the navigation mesh's tile space. [(x, y, z)]")]
    public Vector3 Orig;

    [Description("The width of each tile. (Along the x-axis.)")]
    public float TileWidth;

    [Description("The height of each tile. (Along the z-axis.)")]
    public float TileHeight;

    [Description("The maximum number of tiles the navigation mesh can contain.This and maxPolys are used to calculate how many bits are needed to identify tiles and polygons uniquely.")]
    public int MaxTiles;

    [Description("The maximum number of polygons each tile can contain. This and maxTiles are used to calculate how many bits are needed to identify tiles and polygons uniquely.")]
    public int MaxPolys;

    public void Reserved_PopulateWithData(Func<long, long, byte[]> getData, long streamSize, long adress)
    {
        byte[] data = getData(0, 28);
        PopulateWithData(data, 0);
    }

    public void PopulateWithData(byte[] data, int StartAddress)
    {
        var offset = StartAddress;
        Orig = new Vector3();
        Orig.PopulateWithData(data, offset);
        offset += 12;
        TileWidth = BitConverter.ToSingle(data, offset);
        offset += 4;
        TileHeight = BitConverter.ToSingle(data, offset);
        offset += 4;
        MaxTiles = BitConverter.ToInt32(data, offset);
        offset += 4;
        MaxPolys = BitConverter.ToInt32(data, offset);
    }
}

public class MeshTile
{
    [Description("NavMesh TileHeader")]
    public NavMeshTileHeader NavMeshTileHeader;

    [Description("The tile header.")]
    public MeshHeader MeshHeader;

    [Description("The tile vertices. [Size: dtMeshHeader::vertCount]")]
    public Vector3[] Verts;

    [Description("The tile polygons. [Size: dtMeshHeader::polyCount]")]
    public Poly[] Polys;

    [Description("The tile links. [Size: dtMeshHeader::maxLinkCount]")]
    public Link[] Links;

    [Description("Defines the location of detail sub-mesh data within a dtMeshTile.")]
    public PolyDetail[] DetailMeshes;

    [Description("The detail mesh's unique vertices. [(x, y, z) * dtMeshHeader::detailVertCount]")]
    public Vector3[] DetailVerts;

    [Description("The detail mesh's triangles. [(vertA, vertB, vertC, triFlags) * dtMeshHeader::detailTriCount].")]
    public byte[] DetailTris;

    [Description("The tile bounding volume nodes. [Size: dtMeshHeader::bvNodeCount]")]
    public BVNode[] BVTree;
    
    [Description("The tile off-mesh connections. [Size: dtMeshHeader::offMeshConCount]")]
    public OffMeshConnection[] OffMeshConnections;

    public void Reserved_PopulateWithData(Func<long, long, byte[]> getData, long streamSize, long adress)
    {
        byte[] data = getData(0, 100);
        PopulateWithData(data, 0);
    }

    public void PopulateWithData(byte[] data, int StartAddress)
    {
        var offset = StartAddress;

        NavMeshTileHeader = new NavMeshTileHeader();
        NavMeshTileHeader.PopulateWithData(data, StartAddress);
        offset += 8;

        MeshHeader = new MeshHeader();
        MeshHeader.PopulateWithData(data, offset);
        offset += 100;
        
        Verts = new Vector3[MeshHeader.VertCount];
        for (var i = 0; i < MeshHeader.VertCount; i++)
        {
            Verts[i] = new Vector3();
            Verts[i].PopulateWithData(data, offset);
            offset += 12;
        }
        
        Polys = new Poly[MeshHeader.PolyCount];
        for (var i = 0; i < MeshHeader.PolyCount; i++)
        {
            Polys[i] = new Poly();
            Polys[i].PopulateWithData(data, offset);
            offset += 32;
        }

        Links = new Link[MeshHeader.MaxLinkCount];
        for (var i = 0; i < MeshHeader.MaxLinkCount; i++)
        {
            Links[i] = new Link();
            Links[i].PopulateWithData(data, offset);
            offset += 12;
        }

        DetailMeshes = new PolyDetail[MeshHeader.DetailMeshCount];
        for (var i = 0; i < MeshHeader.DetailMeshCount; i++)
        {
            DetailMeshes[i] = new PolyDetail();
            DetailMeshes[i].PopulateWithData(data, offset);
            offset += 12;
        }

        DetailVerts = new Vector3[MeshHeader.DetailVertCount];
        for (var i = 0; i < MeshHeader.DetailVertCount; i++)
        {
            DetailVerts[i] = new Vector3();
            DetailVerts[i].PopulateWithData(data, offset);
            offset += 12;
        }

        DetailTris = new byte[MeshHeader.DetailTriCount * 4];
        for (var i = 0; i < MeshHeader.DetailTriCount * 4; i++)
        {
            DetailTris[i] = data[offset];
            offset += 1;
        }

        BVTree = new BVNode[MeshHeader.NodeCount];
        for (var i = 0; i < MeshHeader.NodeCount; i++)
        {
            BVTree[i] = new BVNode();
            BVTree[i].PopulateWithData(data, offset);
            offset += 16;
        }
        
        OffMeshConnections = new OffMeshConnection[MeshHeader.OffMeshConCount];
        for (var i = 0; i < MeshHeader.OffMeshConCount; i++)
        {
            OffMeshConnections[i] = new OffMeshConnection();
            OffMeshConnections[i].PopulateWithData(data, offset);
            offset += 36;
        }
    }
}

public class NavMeshTileHeader
{
    public uint TileRef;

    public int DataSize;

    public void Reserved_PopulateWithData(Func<long, long, byte[]> getData, long streamSize, long adress)
    {
        byte[] data = getData(0, 8);
        PopulateWithData(data, 0);
    }

    public void PopulateWithData(byte[] data, int StartAddress)
    {
        TileRef = BitConverter.ToUInt32(data, StartAddress + 0);
        DataSize = BitConverter.ToInt32(data, StartAddress + 4);
    }
}

public class MeshHeader
{
    [Description("Tile magic number. (Used to identify the data format.)")]
    public int Magic;
    [Description("Tile data format version number.")]
    public int Version;
    [Description("The x-position of the tile within the dtNavMesh tile grid. (x, y, layer)")]
    public int X;
    [Description("The y-position of the tile within the dtNavMesh tile grid. (x, y, layer)")]
    public int Y;
    [Description("The layer of the tile within the dtNavMesh tile grid. (x, y, layer)")]
    public int Layer;
    [Description("The user defined id of the tile.")]
    public uint UserId;
    [Description("The number of polygons in the tile.")]
    public int PolyCount;
    [Description("The number of vertices in the tile.")]
    public int VertCount;
    [Description("The number of allocated links.")]
    public int MaxLinkCount;
    [Description("The number of sub-meshes in the detail mesh.")]
    public int DetailMeshCount;
    [Description("The number of unique vertices in the detail mesh. (In addition to the polygon vertices.)")]
    public int DetailVertCount;
    [Description("The number of triangles in the detail mesh.")]
    public int DetailTriCount;
    [Description("The number of bounding volume nodes. (Zero if bounding volumes are disabled.)")]
    public int NodeCount;
    [Description("The number of off-mesh connections.")]
    public int OffMeshConCount;
    [Description("The index of the first polygon which is an off-mesh connection.")]
    public int OffMeshBase;
    [Description("The height of the agents using the tile.")]
    public float WalkableHeight;
    [Description("The radius of the agents using the tile.")]
    public float WalkableRadius;
    [Description("The maximum climb height of the agents using the tile.")]
    public float WalkableClimb;
    [Description("The minimum bounds of the tile's AABB. [(x, y, z)]")]
    public Vector3 BoundMin;
    [Description("The maximum bounds of the tile's AABB. [(x, y, z)]")]
    public Vector3 BoundMax;
    [Description("The bounding volume quantization factor. ")]
    public float QuantFactor;

    public void Reserved_PopulateWithData(Func<long, long, byte[]> getData, long streamSize, long adress)
    {
        byte[] data = getData(0, 100);
        PopulateWithData(data, 0);
    }

    public void PopulateWithData(byte[] data, int StartAddress)
    {
        Magic = BitConverter.ToInt32(data, StartAddress + 0);
        Version = BitConverter.ToInt32(data, StartAddress + 4);
        X = BitConverter.ToInt32(data, StartAddress + 8);
        Y = BitConverter.ToInt32(data, StartAddress + 12);
        Layer = BitConverter.ToInt32(data, StartAddress + 16);
        UserId = BitConverter.ToUInt32(data, StartAddress + 20);
        PolyCount = BitConverter.ToInt32(data, StartAddress + 24);
        VertCount = BitConverter.ToInt32(data, StartAddress + 28);
        MaxLinkCount = BitConverter.ToInt32(data, StartAddress + 32);
        DetailMeshCount = BitConverter.ToInt32(data, StartAddress + 36);
        DetailVertCount = BitConverter.ToInt32(data, StartAddress + 40);
        DetailTriCount = BitConverter.ToInt32(data, StartAddress + 44);
        NodeCount = BitConverter.ToInt32(data, StartAddress + 48);
        OffMeshConCount = BitConverter.ToInt32(data, StartAddress + 52);
        OffMeshBase = BitConverter.ToInt32(data, StartAddress + 56);
        WalkableHeight = BitConverter.ToSingle(data, StartAddress + 60);
        WalkableRadius = BitConverter.ToSingle(data, StartAddress + 64);
        WalkableClimb = BitConverter.ToSingle(data, StartAddress + 68);
        BoundMin = new Vector3();
        BoundMin.PopulateWithData(data, StartAddress + 72);
        BoundMax = new Vector3();
        BoundMax.PopulateWithData(data, StartAddress + 84);
        QuantFactor = BitConverter.ToSingle(data, StartAddress + 96);
    }
}

public class Poly
{
    [Description("Index to first link in linked list. (Or #DT_NULL_LINK if there is no link.)")]
    public uint FirstLink;

    [Description("The indices of the polygon's vertices. The actual vertices are located in dtMeshTile::verts.")]
    public ushort[] Verts = new ushort[6];

    [Description("Packed data representing neighbor polygons references and flags for each edge.")]
    public ushort[] Neis = new ushort[6];

    [Description("The user defined polygon flags.")]
    public ushort Flags;

    [Description("The number of vertices in the polygon.")]
    public byte VertCount;

    [Description("The bit packed area id and polygon type. @note Use the structure's set and get methods to acess this value.")]
    public byte AreaAndType;

    public void Reserved_PopulateWithData(Func<long, long, byte[]> getData, long streamSize, long adress)
    {
        byte[] data = getData(0, 32);
        PopulateWithData(data, 0);
    }

    public void PopulateWithData(byte[] data, int StartAddress)
    {
        var offset = StartAddress;

        FirstLink = BitConverter.ToUInt32(data, offset);
        offset += 4;

        for(var i = 0; i < Verts.Length; i++)
        {
            Verts[i] = BitConverter.ToUInt16(data, offset);
            offset += 2;
        }
        for (var i = 0; i < Neis.Length; i++)
        {
            Neis[i] = BitConverter.ToUInt16(data, offset);
            offset += 2;
        }

        Flags = BitConverter.ToUInt16(data, offset);
        offset += 2;
        VertCount = data[offset++];
        AreaAndType = data[offset++];
    }
};

public class Link
{
    [Description("Neighbour reference. (The neighbor that is linked to.)")]
    public uint Ref;					///< 
    [Description("Index of the next link.")]
    public uint Next;				///< 
    [Description("Index of the polygon edge that owns this link.")]
    public byte Edge;				///< 
    [Description("If a boundary link, defines on which side the link is.")]
    public byte Side;				///< 
    [Description("If a boundary link, defines the minimum sub-edge area.")]
    public byte BMin;				///< 
    [Description("If a boundary link, defines the maximum sub-edge area.")]
    public byte BMax;               ///< 

    public void Reserved_PopulateWithData(Func<long, long, byte[]> getData, long streamSize, long adress)
    {
        byte[] data = getData(0, 32);
        PopulateWithData(data, 0);
    }

    public void PopulateWithData(byte[] data, int StartAddress)
    {
        var offset = StartAddress;

        Ref = BitConverter.ToUInt32(data, offset);
        offset += 4;
        Next = BitConverter.ToUInt32(data, offset);
        offset += 4;
        Edge = data[offset];
        offset += 1;
        Side = data[offset];
        offset += 1;
        BMin = data[offset];
        offset += 1;
        BMax = data[offset];
    }
};

public class PolyDetail
{
    [Description("The offset of the vertices in the dtMeshTile::detailVerts array.")]
    public uint VertBase;			///< 
    [Description("The offset of the triangles in the dtMeshTile::detailTris array.")]
    public uint TriBase;			///< 
    [Description("The number of vertices in the sub-mesh.")]
    public byte VertCount;		///< 
    [Description("The number of triangles in the sub-mesh.")]
    public byte TriCount;          ///< 

    public void Reserved_PopulateWithData(Func<long, long, byte[]> getData, long streamSize, long adress)
    {
        byte[] data = getData(0, 32);
        PopulateWithData(data, 0);
    }

    public void PopulateWithData(byte[] data, int StartAddress)
    {
        var offset = StartAddress;

        VertBase = BitConverter.ToUInt32(data, offset);
        offset += 4;
        TriBase = BitConverter.ToUInt32(data, offset);
        offset += 4;
        VertCount = data[offset];
        offset += 1;
        TriCount = data[offset];
    }
};

public class BVNode
{
    [Description("Minimum bounds of the node's AABB. [(x, y, z)]")]
    public ushort[] BMin;			///< 
    [Description("Maximum bounds of the node's AABB. [(x, y, z)]")]
    public ushort[] BMax;			///< 
    [Description("The node's index. (Negative for escape sequence.)")]
    public int i;							///< 

    public void Reserved_PopulateWithData(Func<long, long, byte[]> getData, long streamSize, long adress)
    {
        byte[] data = getData(0, 32);
        PopulateWithData(data, 0);
    }

    public void PopulateWithData(byte[] data, int StartAddress)
    {
        var offset = StartAddress;

        BMin = new ushort[3];
        for (var j = 0; j < 3; j++)
        {
            BMin[j] = BitConverter.ToUInt16(data, offset);
            offset += 2;
        }
        BMax = new ushort[3];
        for (var j = 0; j < 3; j++)
        {
            BMax[j] = BitConverter.ToUInt16(data, offset);
            offset += 2;
        }
        i = BitConverter.ToInt32(data, offset);
    }
}

public class OffMeshConnection
{
    [Description("The endpoints of the connection. [(ax, ay, az, bx, by, bz)]")]
    public float[] Pos;

    [Description("The radius of the endpoints. [Limit: >= 0]")]
    public float Rad;

    [Description("The polygon reference of the connection within the tile.")]
    public ushort Poly;

    [Description("Link flags.")]
    public byte Flags;

    [Description("End point side.")]
    public byte Side;

    [Description("The id of the offmesh connection. (User assigned when the navigation mesh is built.)")]
    public int UserId;

    public void Reserved_PopulateWithData(Func<long, long, byte[]> getData, long streamSize, long adress)
    {
        byte[] data = getData(0, 32);
        PopulateWithData(data, 0);
    }

    public void PopulateWithData(byte[] data, int StartAddress)
    {
        var offset = StartAddress;

        Pos = new float[6];
        for (var i = 0; i < 6; i++)
        {
            Pos[i] = BitConverter.ToSingle(data, offset);
            offset += 4;
        }
        Rad = BitConverter.ToSingle(data, offset);
        offset += 4;
        Poly = BitConverter.ToUInt16(data, offset);
        offset += 2;
        Flags = data[offset];
        offset += 1;
        Side = data[offset];
        offset += 1;
        UserId = BitConverter.ToInt32(data, offset);
    }
}

public class Vector3
{
    public float X;
    public float Y;
    public float Z;

    public void Reserved_PopulateWithData(Func<long, long, byte[]> getData, long streamSize, long adress)
    {
        byte[] data = getData(0, 12);
        PopulateWithData(data, 0);
    }

    public void PopulateWithData(byte[] data, int StartAddress)
    {
        var offset = StartAddress;

        X = BitConverter.ToSingle(data, offset);
        offset += 4;
        Y = BitConverter.ToSingle(data, offset);
        offset += 4;
        Z = BitConverter.ToSingle(data, offset);
    }
}